// source: conformance/conformance.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.conformance.ConformanceRequest', null, global);
goog.exportSymbol('proto.conformance.ConformanceRequest.PayloadCase', null, global);
goog.exportSymbol('proto.conformance.ConformanceResponse', null, global);
goog.exportSymbol('proto.conformance.ConformanceResponse.ResultCase', null, global);
goog.exportSymbol('proto.conformance.FailureSet', null, global);
goog.exportSymbol('proto.conformance.JspbEncodingConfig', null, global);
goog.exportSymbol('proto.conformance.TestCategory', null, global);
goog.exportSymbol('proto.conformance.WireFormat', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conformance.FailureSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.conformance.FailureSet.repeatedFields_, null);
};
goog.inherits(proto.conformance.FailureSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conformance.FailureSet.displayName = 'proto.conformance.FailureSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conformance.ConformanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.conformance.ConformanceRequest.oneofGroups_);
};
goog.inherits(proto.conformance.ConformanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conformance.ConformanceRequest.displayName = 'proto.conformance.ConformanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conformance.ConformanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.conformance.ConformanceResponse.oneofGroups_);
};
goog.inherits(proto.conformance.ConformanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conformance.ConformanceResponse.displayName = 'proto.conformance.ConformanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.conformance.JspbEncodingConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.conformance.JspbEncodingConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.conformance.JspbEncodingConfig.displayName = 'proto.conformance.JspbEncodingConfig';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.conformance.FailureSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conformance.FailureSet.prototype.toObject = function(opt_includeInstance) {
  return proto.conformance.FailureSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conformance.FailureSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conformance.FailureSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    failureList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conformance.FailureSet}
 */
proto.conformance.FailureSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conformance.FailureSet;
  return proto.conformance.FailureSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conformance.FailureSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conformance.FailureSet}
 */
proto.conformance.FailureSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFailure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conformance.FailureSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conformance.FailureSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conformance.FailureSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conformance.FailureSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFailureList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string failure = 1;
 * @return {!Array<string>}
 */
proto.conformance.FailureSet.prototype.getFailureList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.conformance.FailureSet} returns this
 */
proto.conformance.FailureSet.prototype.setFailureList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.conformance.FailureSet} returns this
 */
proto.conformance.FailureSet.prototype.addFailure = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.conformance.FailureSet} returns this
 */
proto.conformance.FailureSet.prototype.clearFailureList = function() {
  return this.setFailureList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.conformance.ConformanceRequest.oneofGroups_ = [[1,2,7,8]];

/**
 * @enum {number}
 */
proto.conformance.ConformanceRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  PROTOBUF_PAYLOAD: 1,
  JSON_PAYLOAD: 2,
  JSPB_PAYLOAD: 7,
  TEXT_PAYLOAD: 8
};

/**
 * @return {proto.conformance.ConformanceRequest.PayloadCase}
 */
proto.conformance.ConformanceRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.conformance.ConformanceRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.conformance.ConformanceRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conformance.ConformanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.conformance.ConformanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conformance.ConformanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conformance.ConformanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    protobufPayload: msg.getProtobufPayload_asB64(),
    jsonPayload: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jspbPayload: jspb.Message.getFieldWithDefault(msg, 7, ""),
    textPayload: jspb.Message.getFieldWithDefault(msg, 8, ""),
    requestedOutputFormat: jspb.Message.getFieldWithDefault(msg, 3, 0),
    messageType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    testCategory: jspb.Message.getFieldWithDefault(msg, 5, 0),
    jspbEncodingOptions: (f = msg.getJspbEncodingOptions()) && proto.conformance.JspbEncodingConfig.toObject(includeInstance, f),
    printUnknownFields: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conformance.ConformanceRequest}
 */
proto.conformance.ConformanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conformance.ConformanceRequest;
  return proto.conformance.ConformanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conformance.ConformanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conformance.ConformanceRequest}
 */
proto.conformance.ConformanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProtobufPayload(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonPayload(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setJspbPayload(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextPayload(value);
      break;
    case 3:
      var value = /** @type {!proto.conformance.WireFormat} */ (reader.readEnum());
      msg.setRequestedOutputFormat(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 5:
      var value = /** @type {!proto.conformance.TestCategory} */ (reader.readEnum());
      msg.setTestCategory(value);
      break;
    case 6:
      var value = new proto.conformance.JspbEncodingConfig;
      reader.readMessage(value,proto.conformance.JspbEncodingConfig.deserializeBinaryFromReader);
      msg.setJspbEncodingOptions(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrintUnknownFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conformance.ConformanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conformance.ConformanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conformance.ConformanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conformance.ConformanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRequestedOutputFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTestCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getJspbEncodingOptions();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.conformance.JspbEncodingConfig.serializeBinaryToWriter
    );
  }
  f = message.getPrintUnknownFields();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional bytes protobuf_payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.conformance.ConformanceRequest.prototype.getProtobufPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes protobuf_payload = 1;
 * This is a type-conversion wrapper around `getProtobufPayload()`
 * @return {string}
 */
proto.conformance.ConformanceRequest.prototype.getProtobufPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProtobufPayload()));
};


/**
 * optional bytes protobuf_payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProtobufPayload()`
 * @return {!Uint8Array}
 */
proto.conformance.ConformanceRequest.prototype.getProtobufPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProtobufPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.setProtobufPayload = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.conformance.ConformanceRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.clearProtobufPayload = function() {
  return jspb.Message.setOneofField(this, 1, proto.conformance.ConformanceRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceRequest.prototype.hasProtobufPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string json_payload = 2;
 * @return {string}
 */
proto.conformance.ConformanceRequest.prototype.getJsonPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.setJsonPayload = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.conformance.ConformanceRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.clearJsonPayload = function() {
  return jspb.Message.setOneofField(this, 2, proto.conformance.ConformanceRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceRequest.prototype.hasJsonPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string jspb_payload = 7;
 * @return {string}
 */
proto.conformance.ConformanceRequest.prototype.getJspbPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.setJspbPayload = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.conformance.ConformanceRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.clearJspbPayload = function() {
  return jspb.Message.setOneofField(this, 7, proto.conformance.ConformanceRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceRequest.prototype.hasJspbPayload = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string text_payload = 8;
 * @return {string}
 */
proto.conformance.ConformanceRequest.prototype.getTextPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.setTextPayload = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.conformance.ConformanceRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.clearTextPayload = function() {
  return jspb.Message.setOneofField(this, 8, proto.conformance.ConformanceRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceRequest.prototype.hasTextPayload = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional WireFormat requested_output_format = 3;
 * @return {!proto.conformance.WireFormat}
 */
proto.conformance.ConformanceRequest.prototype.getRequestedOutputFormat = function() {
  return /** @type {!proto.conformance.WireFormat} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.conformance.WireFormat} value
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.setRequestedOutputFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string message_type = 4;
 * @return {string}
 */
proto.conformance.ConformanceRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional TestCategory test_category = 5;
 * @return {!proto.conformance.TestCategory}
 */
proto.conformance.ConformanceRequest.prototype.getTestCategory = function() {
  return /** @type {!proto.conformance.TestCategory} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.conformance.TestCategory} value
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.setTestCategory = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional JspbEncodingConfig jspb_encoding_options = 6;
 * @return {?proto.conformance.JspbEncodingConfig}
 */
proto.conformance.ConformanceRequest.prototype.getJspbEncodingOptions = function() {
  return /** @type{?proto.conformance.JspbEncodingConfig} */ (
    jspb.Message.getWrapperField(this, proto.conformance.JspbEncodingConfig, 6));
};


/**
 * @param {?proto.conformance.JspbEncodingConfig|undefined} value
 * @return {!proto.conformance.ConformanceRequest} returns this
*/
proto.conformance.ConformanceRequest.prototype.setJspbEncodingOptions = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.clearJspbEncodingOptions = function() {
  return this.setJspbEncodingOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceRequest.prototype.hasJspbEncodingOptions = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool print_unknown_fields = 9;
 * @return {boolean}
 */
proto.conformance.ConformanceRequest.prototype.getPrintUnknownFields = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.conformance.ConformanceRequest} returns this
 */
proto.conformance.ConformanceRequest.prototype.setPrintUnknownFields = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.conformance.ConformanceResponse.oneofGroups_ = [[1,6,9,2,3,4,5,7,8]];

/**
 * @enum {number}
 */
proto.conformance.ConformanceResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  PARSE_ERROR: 1,
  SERIALIZE_ERROR: 6,
  TIMEOUT_ERROR: 9,
  RUNTIME_ERROR: 2,
  PROTOBUF_PAYLOAD: 3,
  JSON_PAYLOAD: 4,
  SKIPPED: 5,
  JSPB_PAYLOAD: 7,
  TEXT_PAYLOAD: 8
};

/**
 * @return {proto.conformance.ConformanceResponse.ResultCase}
 */
proto.conformance.ConformanceResponse.prototype.getResultCase = function() {
  return /** @type {proto.conformance.ConformanceResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.conformance.ConformanceResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conformance.ConformanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.conformance.ConformanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conformance.ConformanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conformance.ConformanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    parseError: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serializeError: jspb.Message.getFieldWithDefault(msg, 6, ""),
    timeoutError: jspb.Message.getFieldWithDefault(msg, 9, ""),
    runtimeError: jspb.Message.getFieldWithDefault(msg, 2, ""),
    protobufPayload: msg.getProtobufPayload_asB64(),
    jsonPayload: jspb.Message.getFieldWithDefault(msg, 4, ""),
    skipped: jspb.Message.getFieldWithDefault(msg, 5, ""),
    jspbPayload: jspb.Message.getFieldWithDefault(msg, 7, ""),
    textPayload: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conformance.ConformanceResponse}
 */
proto.conformance.ConformanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conformance.ConformanceResponse;
  return proto.conformance.ConformanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conformance.ConformanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conformance.ConformanceResponse}
 */
proto.conformance.ConformanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParseError(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerializeError(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeoutError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuntimeError(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProtobufPayload(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonPayload(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSkipped(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setJspbPayload(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conformance.ConformanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conformance.ConformanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conformance.ConformanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conformance.ConformanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string parse_error = 1;
 * @return {string}
 */
proto.conformance.ConformanceResponse.prototype.getParseError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.setParseError = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.conformance.ConformanceResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.clearParseError = function() {
  return jspb.Message.setOneofField(this, 1, proto.conformance.ConformanceResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceResponse.prototype.hasParseError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string serialize_error = 6;
 * @return {string}
 */
proto.conformance.ConformanceResponse.prototype.getSerializeError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.setSerializeError = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.conformance.ConformanceResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.clearSerializeError = function() {
  return jspb.Message.setOneofField(this, 6, proto.conformance.ConformanceResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceResponse.prototype.hasSerializeError = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string timeout_error = 9;
 * @return {string}
 */
proto.conformance.ConformanceResponse.prototype.getTimeoutError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.setTimeoutError = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.conformance.ConformanceResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.clearTimeoutError = function() {
  return jspb.Message.setOneofField(this, 9, proto.conformance.ConformanceResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceResponse.prototype.hasTimeoutError = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string runtime_error = 2;
 * @return {string}
 */
proto.conformance.ConformanceResponse.prototype.getRuntimeError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.setRuntimeError = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.conformance.ConformanceResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.clearRuntimeError = function() {
  return jspb.Message.setOneofField(this, 2, proto.conformance.ConformanceResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceResponse.prototype.hasRuntimeError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes protobuf_payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.conformance.ConformanceResponse.prototype.getProtobufPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes protobuf_payload = 3;
 * This is a type-conversion wrapper around `getProtobufPayload()`
 * @return {string}
 */
proto.conformance.ConformanceResponse.prototype.getProtobufPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProtobufPayload()));
};


/**
 * optional bytes protobuf_payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProtobufPayload()`
 * @return {!Uint8Array}
 */
proto.conformance.ConformanceResponse.prototype.getProtobufPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProtobufPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.setProtobufPayload = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.conformance.ConformanceResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.clearProtobufPayload = function() {
  return jspb.Message.setOneofField(this, 3, proto.conformance.ConformanceResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceResponse.prototype.hasProtobufPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string json_payload = 4;
 * @return {string}
 */
proto.conformance.ConformanceResponse.prototype.getJsonPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.setJsonPayload = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.conformance.ConformanceResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.clearJsonPayload = function() {
  return jspb.Message.setOneofField(this, 4, proto.conformance.ConformanceResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceResponse.prototype.hasJsonPayload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string skipped = 5;
 * @return {string}
 */
proto.conformance.ConformanceResponse.prototype.getSkipped = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.setSkipped = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.conformance.ConformanceResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.clearSkipped = function() {
  return jspb.Message.setOneofField(this, 5, proto.conformance.ConformanceResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceResponse.prototype.hasSkipped = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string jspb_payload = 7;
 * @return {string}
 */
proto.conformance.ConformanceResponse.prototype.getJspbPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.setJspbPayload = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.conformance.ConformanceResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.clearJspbPayload = function() {
  return jspb.Message.setOneofField(this, 7, proto.conformance.ConformanceResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceResponse.prototype.hasJspbPayload = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string text_payload = 8;
 * @return {string}
 */
proto.conformance.ConformanceResponse.prototype.getTextPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.setTextPayload = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.conformance.ConformanceResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.conformance.ConformanceResponse} returns this
 */
proto.conformance.ConformanceResponse.prototype.clearTextPayload = function() {
  return jspb.Message.setOneofField(this, 8, proto.conformance.ConformanceResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.conformance.ConformanceResponse.prototype.hasTextPayload = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.conformance.JspbEncodingConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.conformance.JspbEncodingConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.conformance.JspbEncodingConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conformance.JspbEncodingConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    useJspbArrayAnyFormat: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.conformance.JspbEncodingConfig}
 */
proto.conformance.JspbEncodingConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.conformance.JspbEncodingConfig;
  return proto.conformance.JspbEncodingConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.conformance.JspbEncodingConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.conformance.JspbEncodingConfig}
 */
proto.conformance.JspbEncodingConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseJspbArrayAnyFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.conformance.JspbEncodingConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.conformance.JspbEncodingConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.conformance.JspbEncodingConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.conformance.JspbEncodingConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUseJspbArrayAnyFormat();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool use_jspb_array_any_format = 1;
 * @return {boolean}
 */
proto.conformance.JspbEncodingConfig.prototype.getUseJspbArrayAnyFormat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.conformance.JspbEncodingConfig} returns this
 */
proto.conformance.JspbEncodingConfig.prototype.setUseJspbArrayAnyFormat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.conformance.WireFormat = {
  UNSPECIFIED: 0,
  PROTOBUF: 1,
  JSON: 2,
  JSPB: 3,
  TEXT_FORMAT: 4
};

/**
 * @enum {number}
 */
proto.conformance.TestCategory = {
  UNSPECIFIED_TEST: 0,
  BINARY_TEST: 1,
  JSON_TEST: 2,
  JSON_IGNORE_UNKNOWN_PARSING_TEST: 3,
  JSPB_TEST: 4,
  TEXT_FORMAT_TEST: 5
};

goog.object.extend(exports, proto.conformance);

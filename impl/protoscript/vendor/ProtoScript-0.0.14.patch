diff --git a/src/codegen/autogenerate/index.ts b/src/codegen/autogenerate/index.ts
index 6caf6d1..a2968fe 100644
--- a/src/codegen/autogenerate/index.ts
+++ b/src/codegen/autogenerate/index.ts
@@ -131,6 +131,7 @@ function writeProtobufSerializers(
           result += "},\n\n";
 
           // initialize
+          const messageFields = node.content.fields.filter((field) => !field.optional && !field.repeated && field.read === "readMessage" && !field.map && !field.tsType.startsWith("protoscript."));
           result += `\
           /**
            * Initializes ${
@@ -140,6 +141,10 @@ function writeProtobufSerializers(
           initialize: function()${printIfTypescript(
             `: ${node.content.namespacedName}`
           )} {
+            ${messageFields.map((field) => {
+                return `let _${field.name}: ${field.tsType} | undefined;`;
+              })
+              .join("\n")}
             return {
               ${node.content.fields
                 .map((field) => {
@@ -149,7 +154,12 @@ function writeProtobufSerializers(
                   if (field.repeated) {
                     return `${field.name}: [],`;
                   } else if (field.read === "readMessage" && !field.map) {
-                    return `${field.name}: ${field.tsType}.initialize(),`;
+                    return `get ${field.name}(): ${field.tsType} {
+                      if (!_${field.name}) {
+                        _${field.name} = ${field.tsType}.initialize();
+                      }
+                      return _${field.name};
+                    },`;
                   } else {
                     return `${field.name}: ${field.defaultValue},`;
                   }
@@ -346,7 +356,14 @@ function writeProtobufSerializers(
         )})${printIfTypescript(`: ${node.content.namespacedName}`)} {
           switch (i) {
         `;
+
+        const seenValues = new Set<number>();
         node.content.values.forEach(({ name, value }) => {
+          if (seenValues.has(value)) {
+            return;
+          }
+
+          seenValues.add(value);
           result += `case ${value}: { return '${name}'; }\n`;
         });
 
@@ -449,6 +466,7 @@ function writeJSONSerializers(
           result += "},\n\n";
 
           // initialize
+          const messageFields = node.content.fields.filter((field) => !field.optional && !field.repeated && field.read === "readMessage" && !field.map && !field.tsType.startsWith("protoscript."));
           result += `\
           /**
            * Initializes ${
@@ -458,6 +476,10 @@ function writeJSONSerializers(
           initialize: function()${printIfTypescript(
             `: ${node.content.namespacedName}`
           )} {
+            ${messageFields.map((field) => {
+                return `let _${field.name}: ${field.tsType} | undefined;`;
+              })
+              .join("\n")}
             return {
               ${node.content.fields
                 .map((field) => {
@@ -467,7 +489,12 @@ function writeJSONSerializers(
                   if (field.repeated) {
                     return `${field.name}: [],`;
                   } else if (field.read === "readMessage" && !field.map) {
-                    return `${field.name}: ${field.tsTypeJSON}.initialize(),`;
+                    return `get ${field.name}(): ${field.tsType} {
+                      if (!_${field.name}) {
+                        _${field.name} = ${field.tsTypeJSON}.initialize();
+                      }
+                      return _${field.name};
+                    },`;
                   } else {
                     return `${field.name}: ${field.defaultValue},`;
                   }
@@ -650,7 +677,14 @@ function writeJSONSerializers(
         )})${printIfTypescript(`: ${node.content.namespacedName}`)} {
           switch (i) {
         `;
+
+        const seenValues = new Set<number>();
         node.content.values.forEach(({ name, value }) => {
+          if (seenValues.has(value)) {
+            return;
+          }
+
+          seenValues.add(value);
           result += `case ${value}: { return '${name}'; }\n`;
         });
 
diff --git a/src/codegen/utils.ts b/src/codegen/utils.ts
index 7cc590d..d8d96f3 100644
--- a/src/codegen/utils.ts
+++ b/src/codegen/utils.ts
@@ -20,7 +20,7 @@ function titleCase(str: string): string {
 
 function camelCase(segments: string[]): string {
   const [first, ...rest] = segments;
-  return first + rest.map(titleCase).join("");
+  return first + rest.filter(Boolean).map(titleCase).join("");
 }
 
 const FileLabel = {
